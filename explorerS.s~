	.file	"explorersASM.c"
	.text
	.globl	sum
	.type	sum, @function
sum:
.LFB2:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	jmp	.L2
.L3:
	cvtsi2ss	-4(%rbp), %xmm0
	movl	-8(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movss	(%rax), %xmm1
	addss	%xmm1, %xmm0
	cvttss2si	%xmm0, %eax
	movl	%eax, -4(%rbp)
	addl	$1, -8(%rbp)
.L2:
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L3
	movl	-4(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	sum, .-sum
	.globl	generate_random_list
	.type	generate_random_list, @function
generate_random_list:
.LFB3:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset 3, -24
	movl	%edi, -36(%rbp)
	movl	%esi, -40(%rbp)
	movl	-36(%rbp), %eax
	cltq
	salq	$2, %rax
	movq	%rax, %rdi
	call	malloc
	movq	%rax, -24(%rbp)
	movl	$0, -28(%rbp)
	jmp	.L6
.L7:
	movl	-28(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	-24(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	call	rand
	movl	%eax, %edx
	movl	-40(%rbp), %eax
	addl	%eax, %eax
	leal	1(%rax), %ecx
	movl	%edx, %eax
	cltd
	idivl	%ecx
	movl	%edx, %eax
	subl	-40(%rbp), %eax
	cvtsi2ss	%eax, %xmm0
	movss	%xmm0, (%rbx)
	addl	$1, -28(%rbp)
.L6:
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L7
	movq	-24(%rbp), %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE3:
	.size	generate_random_list, .-generate_random_list
	.globl	update_coords
	.type	update_coords, @function
update_coords:
.LFB4:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -64(%rbp)
	movq	-48(%rbp), %r8
	movq	-56(%rbp), %r9
	movq	-64(%rbp), %r10
	movq	16(%rbp), %r11
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
#APP
# 39 "explorersASM.c" 1
	loop:
	movq (%r8,%rdx,8), %rax
	
# 0 "" 2
#NO_APP
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%rdx, -8(%rbp)
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE4:
	.size	update_coords, .-update_coords
	.section	.rodata
	.align 8
.LC0:
	.string	"Required arguments: vector_length(N) and iterations_num(M). "
	.align 8
.LC1:
	.string	"Mean time per coordinate: %llu nanoseconds. \n"
.LC2:
	.string	"Checksum: %llu \n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB5:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset 3, -24
	movl	%edi, -148(%rbp)
	movq	%rsi, -160(%rbp)
	cmpl	$3, -148(%rbp)
	je	.L11
	movl	$.LC0, %edi
	call	puts
	movl	$-1, %eax
	jmp	.L15
.L11:
	movq	-160(%rbp), %rax
	addq	$8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	atoi
	movl	%eax, -128(%rbp)
	movq	-160(%rbp), %rax
	addq	$16, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	atoi
	movl	%eax, -124(%rbp)
	movl	-128(%rbp), %eax
	movl	%eax, %edi
	call	srand
	movl	-128(%rbp), %eax
	movl	$1000, %esi
	movl	%eax, %edi
	call	generate_random_list
	movq	%rax, -120(%rbp)
	movl	-128(%rbp), %eax
	movl	$1000, %esi
	movl	%eax, %edi
	call	generate_random_list
	movq	%rax, -112(%rbp)
	movl	-128(%rbp), %eax
	movl	$1000, %esi
	movl	%eax, %edi
	call	generate_random_list
	movq	%rax, -104(%rbp)
	movl	-128(%rbp), %eax
	movl	$1, %esi
	movl	%eax, %edi
	call	generate_random_list
	movq	%rax, -96(%rbp)
	movl	-128(%rbp), %eax
	movl	$1, %esi
	movl	%eax, %edi
	call	generate_random_list
	movq	%rax, -88(%rbp)
	movl	-128(%rbp), %eax
	movl	$1, %esi
	movl	%eax, %edi
	call	generate_random_list
	movq	%rax, -80(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rsi
	movl	$1, %edi
	call	clock_gettime
	movl	$0, -132(%rbp)
	jmp	.L13
.L14:
	movl	-128(%rbp), %eax
	movslq	%eax, %rdi
	movq	-80(%rbp), %r9
	movq	-88(%rbp), %r8
	movq	-96(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movq	-120(%rbp), %rax
	movq	%rdi, (%rsp)
	movq	%rax, %rdi
	call	update_coords
	addl	$1, -132(%rbp)
.L13:
	movl	-132(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jl	.L14
	leaq	-32(%rbp), %rax
	movq	%rax, %rsi
	movl	$1, %edi
	call	clock_gettime
	movq	-32(%rbp), %rdx
	movq	-48(%rbp), %rax
	subq	%rax, %rdx
	movq	%rdx, %rax
	imulq	$1000000000, %rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rax, %rdx
	movq	-40(%rbp), %rax
	subq	%rax, %rdx
	movq	%rdx, %rax
	movq	%rax, -72(%rbp)
	movl	-128(%rbp), %eax
	imull	-124(%rbp), %eax
	movslq	%eax, %rcx
	movq	-72(%rbp), %rax
	movl	$0, %edx
	divq	%rcx
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rsi
	movl	$.LC1, %edi
	movl	$0, %eax
	call	printf
	movl	-128(%rbp), %edx
	movq	-120(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	sum
	movl	%eax, %ebx
	movl	-128(%rbp), %edx
	movq	-112(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	sum
	addl	%eax, %ebx
	movl	-128(%rbp), %edx
	movq	-104(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	sum
	addl	%ebx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, %rsi
	movl	$.LC2, %edi
	movl	$0, %eax
	call	printf
	movq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	free
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	free
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	free
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	free
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	free
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	free
	movq	$0, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -120(%rbp)
	movl	$0, %eax
.L15:
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE5:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 4.8.4-2ubuntu1~14.04) 4.8.4"
	.section	.note.GNU-stack,"",@progbits
